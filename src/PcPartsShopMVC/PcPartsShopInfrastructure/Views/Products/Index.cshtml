@model IEnumerable<PcPartsShopDomain.Model.Product>
@using System.Globalization
@using System.Security.Claims

@{
    ViewData["Title"] = "Product Catalog";
}

<div class="container mt-4">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <div>
            @if (User.Identity.IsAuthenticated)
            {
                <a href="@Url.Action("ViewCart", "Cart")" class="btn btn-outline-primary me-2">
                    <i class="fas fa-shopping-cart me-1"></i>
                    View Cart
                </a>
                <form asp-action="Logout" asp-controller="Account" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-outline-danger">
                        <i class="fas fa-sign-out-alt me-1"></i>
                        Logout
                    </button>
                </form>
            }
            else
            {
                <a href="@Url.Action("Login", "Account")" class="btn btn-outline-info me-2">
                    <i class="fas fa-sign-in-alt me-1"></i>Login
                </a>
                <a href="@Url.Action("Register", "Account")" class="btn btn-outline-success">
                    <i class="fas fa-user-plus me-1"></i>Register
                </a>
            }
        </div>
    </div>


    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title mb-3">Filter & Search</h5>
            <form asp-controller="Products" asp-action="Index" method="get">
                <div class="row g-3 align-items-end">
                    <div class="col-md-5 col-lg-5">
                        <label for="searchString" class="form-label visually-hidden">Search</label> @* Hidden label for accessibility *@
                        <input type="text" name="searchString" id="searchString" class="form-control" placeholder="Search products by name..."
                               value="@Context.Request.Query["searchString"]">
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <label for="category" class="form-label visually-hidden">Category</label>
                        <select name="category" id="category" class="form-select">
                            <option value="">All Categories</option>
                            @if (ViewData["Categories"] is List<string> categories)
                            {
                                string selectedCategory = Context.Request.Query["category"];
                                foreach (var category in categories)
                                {
                                    <option value="@category" selected="@(category == selectedCategory)">@category</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3 col-lg-3 d-flex justify-content-start justify-content-md-end">
                        <button type="submit" class="btn btn-primary me-2">
                            <i class="fas fa-search me-1"></i> Search
                        </button>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-undo me-1"></i> Reset
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (User.IsInRole("Admin") || User.IsInRole("SuperAdmin"))
    {
        <div class="mb-3 d-flex gap-2">
            @if (User.IsInRole("Admin"))
            {
                <a asp-action="Create" class="btn btn-success">
                    <i class="fas fa-plus me-1"></i> Add Product
                </a>
            }
            @if (User.IsInRole("SuperAdmin"))
            {
                <a asp-controller="Admin" asp-action="UserList" class="btn btn-dark">
                    <i class="fas fa-users-cog me-1"></i> Manage Users
                </a>
            }
        </div>
    }

    <div class="row mb-4 g-4">
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    <h5 class="mb-0">Products by Category</h5>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center">
                    <div id="category_chart_div" style="width: 100%; height: 300px;">Loading...</div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    <h5 class="mb-0">Products by Brand</h5>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center">
                    <div id="brand_chart_div" style="width: 100%; height: 300px;">Loading...</div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <h5 class="mb-0">Product List</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col" class="ps-3">Product</th>
                            <th scope="col">Category</th>
                            <th scope="col">Price</th>
                            <th scope="col">Brand</th>
                            <th scope="col" class="text-end pe-3">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.Any())
                        {
                            <tr>
                                <td colspan="5" class="text-center p-4">No products found matching your criteria.</td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="ps-3">@item.Name</td>
                                <td>@item.Category</td>
                                <td>@item.Price.ToString("C", new CultureInfo("en-US"))</td>
                                <td>@(item.Brand?.Name ?? "N/A")</td>
                                <td class="text-end pe-3">
                                    <div class="btn-group btn-group-sm" role="group" aria-label="Product Actions">
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (User.IsInRole("Admin"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <form asp-action="Delete" asp-controller="Products" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to delete product @item.Name?');">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-outline-danger" title="Delete">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </form>
                                        }
                                        @if (User.Identity.IsAuthenticated && !User.IsInRole("Admin") && !User.IsInRole("SuperAdmin"))
                                        {
                                            <form asp-controller="Cart" asp-action="AddToCart" asp-route-id="@item.Id" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-outline-primary" title="Add to Cart">
                                                    <i class="fas fa-cart-plus"></i>
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>


@section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(loadChartData);

        function loadChartData() {
            fetchCategoryData();
            fetchBrandData();
        }

        async function fetchCategoryData() {
             try {
                 const response = await fetch('@Url.Action("GetProductCountByCategory", "Dashboard")');
                 if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                 const jsonData = await response.json();
                 drawCategoryChart(jsonData);
             } catch (error) {
                 console.error('Error fetching category chart data:', error);
                 document.getElementById('category_chart_div').innerHTML = '<div class="alert alert-danger">Error loading category chart.</div>';
             }
         }

         function drawCategoryChart(jsonData) {
              if (!jsonData || !Array.isArray(jsonData) || jsonData.length <= 1) {
                 document.getElementById('category_chart_div').innerHTML = '<div class="text-muted">No category data available.</div>';
                 console.warn("Category chart data missing or empty.");
                 return;
             }
             var data = google.visualization.arrayToDataTable(jsonData);
             var options = { title: 'Product Count by Category', pieHole: 0.4, chartArea: { width: '90%', height: '80%' }, legend: { position: 'right', textStyle: { fontSize: 12 } } };
             var chart = new google.visualization.PieChart(document.getElementById('category_chart_div'));
             chart.draw(data, options);
         }

         async function fetchBrandData() {
            try {
                 const response = await fetch('@Url.Action("GetProductCountByBrand", "Dashboard")');
                 if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                 const jsonData = await response.json();
                 drawBrandChart(jsonData);
             } catch (error) {
                 console.error('Error fetching brand chart data:', error);
                  document.getElementById('brand_chart_div').innerHTML = '<div class="alert alert-danger">Error loading brand chart.</div>';
             }
         }

         function drawBrandChart(jsonData) {
              if (!jsonData || !Array.isArray(jsonData) || jsonData.length <= 1) {
                 document.getElementById('brand_chart_div').innerHTML = '<div class="text-muted">No brand data available.</div>';
                 console.warn("Brand chart data missing or empty.");
                 return;
             }
             var data = google.visualization.arrayToDataTable(jsonData);
             var options = { title: 'Product Count by Brand', chartArea: { width: '70%', height: '80%' }, legend: { position: 'none' }, hAxis: { title: 'Count', minValue: 0 }, vAxis: { title: 'Brand' }, bars: 'horizontal' };
              var chart = new google.visualization.BarChart(document.getElementById('brand_chart_div'));
             chart.draw(data, options);
         }

        window.addEventListener('resize', loadChartData, false);

    </script>
}